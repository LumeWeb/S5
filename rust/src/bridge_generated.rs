#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.73.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_encrypt_xchacha20poly1305_impl(
    port_: MessagePort,
    key: impl Wire2Api<Vec<u8>> + UnwindSafe,
    nonce: impl Wire2Api<Vec<u8>> + UnwindSafe,
    plaintext: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "encrypt_xchacha20poly1305",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            let api_nonce = nonce.wire2api();
            let api_plaintext = plaintext.wire2api();
            move |task_callback| encrypt_xchacha20poly1305(api_key, api_nonce, api_plaintext)
        },
    )
}
fn wire_decrypt_xchacha20poly1305_impl(
    port_: MessagePort,
    key: impl Wire2Api<Vec<u8>> + UnwindSafe,
    nonce: impl Wire2Api<Vec<u8>> + UnwindSafe,
    ciphertext: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decrypt_xchacha20poly1305",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            let api_nonce = nonce.wire2api();
            let api_ciphertext = ciphertext.wire2api();
            move |task_callback| decrypt_xchacha20poly1305(api_key, api_nonce, api_ciphertext)
        },
    )
}
fn wire_hash_blake3_file_impl(port_: MessagePort, path: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "hash_blake3_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            move |task_callback| hash_blake3_file(api_path)
        },
    )
}
fn wire_hash_blake3_impl(port_: MessagePort, input: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "hash_blake3",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| hash_blake3(api_input)
        },
    )
}
fn wire_hash_blake3_sync_impl(
    input: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "hash_blake3_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_input = input.wire2api();
            Ok(hash_blake3_sync(api_input))
        },
    )
}
fn wire_verify_integrity_impl(
    port_: MessagePort,
    chunk_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
    offset: impl Wire2Api<u64> + UnwindSafe,
    bao_outboard_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
    blake3_hash: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "verify_integrity",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_chunk_bytes = chunk_bytes.wire2api();
            let api_offset = offset.wire2api();
            let api_bao_outboard_bytes = bao_outboard_bytes.wire2api();
            let api_blake3_hash = blake3_hash.wire2api();
            move |task_callback| {
                verify_integrity(
                    api_chunk_bytes,
                    api_offset,
                    api_bao_outboard_bytes,
                    api_blake3_hash,
                )
            }
        },
    )
}
fn wire_hash_bao_file_impl(port_: MessagePort, path: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "hash_bao_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            move |task_callback| hash_bao_file(api_path)
        },
    )
}
fn wire_hash_bao_memory_impl(port_: MessagePort, bytes: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "hash_bao_memory",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.wire2api();
            move |task_callback| hash_bao_memory(api_bytes)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for BaoResult {
    fn into_dart(self) -> support::DartAbi {
        vec![self.hash.into_dart(), self.outboard.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BaoResult {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
